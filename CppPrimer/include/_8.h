#ifndef _8_H
#define _8_H
/*
 * 主要内容：
 * 1. 内联函数（inline声明），区别与联系于C中的宏函数
 * 2. 引用变量（声明时必须初始化，作为函数形参使用时可能会产生实参的临时副本【实参向形参做出隐式类型转换时】）
 * 3. 函数的默认参数（为某个参数提供默认值时必须对参数列表中处在其位置之后的所有参数提供默认值）
 * 4. 函数重载
 * 5. 函数模板（编译器通过函数模板生成特定类型参数的函数的过程叫做隐式实例化，编程时指定参数类型的过程叫做显示实例化）
 * 6. 函数模板具体化（显示具体化表示当参数为指定类型时不使用模板生成函数定义，隐式实例化，显示实例化，显示具体化都叫做具体化）
 * 7. 编译器如何选择使用哪个函数版本（粗略了解，较复杂）
 *      7.1 创建候选函数列表。其中包含与被调用函数的名称相同的函数和模板函数
 *      7.2 使用候选数列表创建可行函数列表。参数数目和类型均与被调用函数匹配，允许需要进行隐式类型转换的函数匹配成功
 *      7.3 确定是否有最佳的可行函数。如果有，则使用它，否则报错。
 */

#include <iostream>
#include <cstring>

//8-1过于沙雕，不写了

struct CandyBar8 {
    char brand[30];
    double weight;
    int calorie;
};
void _8_2();

void _8_3();

struct stringgy {
    char *str;
    int ct;
};
void _8_4();

void _8_5();

void _8_6();

#endif // _8_H
